<section class="hero">
    <div class="container">
        <div class="hero-content">
            <div class="heading-container">
                <h1 class="hero-heading">
                    <span class="typing-wrapper"></span>
                    <span class="cursor">|</span>
                </h1>
            </div>

            <p class="hero-subtitle">
                A distributed network monitoring system designed for
                infrastructure and services in hard to reach places.
            </p>
            <div class="hero-buttons">
                <a href="/get-started" class="btn btn-primary">Get started</a>
                <a href="/playground" class="btn btn-secondary"
                    >Try playground</a
                >
            </div>
        </div>
        <div class="hero-image">
            <div class="placeholder-bg"></div>
        </div>
    </div>
</section>

<style>
    .hero {
        padding: 4rem 0 2rem;
        height: 850px;
        position: relative;
        overflow: hidden;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .hero-content {
        max-width: 1100px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        width: 100%;
    }

    .heading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 2rem;
        width: 100%;
    }

    .hero-heading {
        font-family: var(--font-mono);
        font-size: 4rem;
        line-height: 1.2;
        font-weight: 100;
        color: #ffffff;
        margin: 0 0 1rem 0;
        text-align: center;
        position: relative;
        white-space: nowrap;
    }

    .typing-wrapper {
        display: inline-block;
    }

    .cursor {
        display: inline-block;
        margin-left: 0.1rem;
        animation: blink 1s step-end infinite;
        color: #2fcc71;
    }

    @keyframes blink {
        from,
        to {
            opacity: 1;
        }
        50% {
            opacity: 0;
        }
    }

    .hero-subtitle {
        font-size: 1.2rem;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        max-width: 800px;
        text-align: center;
        font-family: var(--font-mono);
        font-weight: 100;
    }

    .hero-buttons {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 3rem;
        justify-content: center;
    }

    .hero-buttons .btn {
        font-family: "IBM Plex Sans", sans-serif;
        font-weight: 400;
    }

    .hero-image {
        width: 100%;
        max-width: 1000px;
        height: 850px;
        border-radius: 8px;
        overflow: hidden;
    }

    .placeholder-bg {
        width: 100%;
        height: 800px;
    }

    @media (max-width: 768px) {
        .hero-heading {
            font-size: 3rem;
            white-space: normal;
            word-wrap: break-word;
        }

        .hero-buttons {
            flex-direction: column;
            width: 100%;
            max-width: 300px;
            margin-left: auto;
            margin-right: auto;
        }

        .hero-image {
            height: 250px;
        }
    }

    @media (max-width: 480px) {
        .hero-heading {
            font-size: 2.5rem;
            white-space: normal;
            word-wrap: break-word;
        }

        .hero-subtitle {
            font-size: 1rem;
        }

        .hero-image {
            height: 200px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const typingWrapper = document.querySelector(".typing-wrapper");
        const cursor = document.querySelector(".cursor");
        const textToType = "Network Visibility, Anywhere";

        let charIndex = 0;
        let isDeleting = false;
        const typingSpeed = 100; // Speed for typing (in ms)
        const deletingSpeed = 50; // Speed for deleting (in ms)
        const completedDelay = 4600; // Wait 4.6 seconds after completion before restarting

        function typeAnimation() {
            // Current text in the display
            const currentText = typingWrapper.textContent;

            if (!isDeleting && charIndex < textToType.length) {
                // Typing forward
                typingWrapper.textContent += textToType.charAt(charIndex);
                charIndex++;
                setTimeout(typeAnimation, typingSpeed);
            } else if (!isDeleting && charIndex >= textToType.length) {
                // Reached the end, wait 4.6 seconds before deleting
                isDeleting = true;
                setTimeout(typeAnimation, completedDelay);
            } else if (isDeleting && currentText.length > 0) {
                // Deleting
                typingWrapper.textContent = currentText.substring(
                    0,
                    currentText.length - 1,
                );
                setTimeout(typeAnimation, deletingSpeed);
            } else {
                // Deleted everything, restart typing
                isDeleting = false;
                charIndex = 0;
                setTimeout(typeAnimation, typingSpeed);
            }
        }

        // Start typing animation with a small initial delay
        setTimeout(typeAnimation, 800);
    });
</script>
